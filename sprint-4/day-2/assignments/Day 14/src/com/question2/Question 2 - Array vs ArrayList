Array-
1.Definition- An array is a dynamically-created object. It serves as a container
	that holds the constant number of values of the same type. It has a contiguous
	memory location.
2.Static/Dynamic- Array is static in size.
3.Resizable- An array is a fixed-length data structure.
4.Initialization- It is mandatory to provide the size of an array while initializing
	it directly or indirectly.
5.Performance- It performs fast in comparison to ArrayList because of fixed size.
6.Primitive/Generic type- An array can store both objects and primitives type.
7.Iterating values- We use for loop or for each loop to iterate over an array.
8.Type-Safety- We cannot use generics along with array because it is not a convertible type of array.
9.Length- Array provides a length variable which denotes the length of an array.
10.Adding Elements- We can add elements in an array by using the assignment operator.
11.Single/ Multi-Dimensional- Array can be multi-dimensional.



ArrayList-
1.Defintion- The ArrayList is a class of Java collections framework. It contains
	popular classes like Vector, HashTable, and HashMap.
2.Static/Dynamic- ArrayList is dynamic in size.
3.Resizable- ArrayList is a variable-length data structure. It can be resized
	itself when needed.
4.Initialization- We can create an instance of ArrayList without specifying its size.
	Java created ArrayList of default size.
5.Performance- ArrayList is internally backed by the array in Java. The resize operation
	in ArrayList slows down the performance.
6.Primitive/Generic type- We cannot store primitive type in ArrayList. It automatically
	converts primitive type to object.
7.Iterating values- We use an iterator to iterator to iterate over ArrayList.
8.Type-Safety- ArrayList allows us to store only generic/ type, that's why it is type-safe.
9.Length- ArrayList provides the size() method to determine the size of ArrayList.
10.Adding Elements- Java provides the add() method to add elements in the ArrayList.
11.Single/ Multi-Dimensional- ArrayList is always single-dimensional.

